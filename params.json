{"name":"Punk","tagline":"Punk, It is a group of commands line tools, to solve Np-Complete & NP-Hard Problems Easy","body":"# Punk \r\n## Simplicity Tool Kit\r\n\r\nPunk, It is a group of commands line tools, to solve Np-Complete & NP-Hard Problems Easy, \r\nthey are founded, in the ABSTRACT BINARY SEARCH, \r\nresult of 2 years of research, on the universal theory of numbers.\r\n\r\nPunk-Research = Independent + Anarchist + Knowledge\r\n\r\nAbout Me: <Oscar Riveros> \r\nI'm just what time...\r\n\r\nThe binaries included are for OS X, you need compile the files for you OS, for SHA3 cracker its necessary Crypto++,\r\n\r\nTIP: Optimize Compilation Parameters\r\n\r\n![Punk](https://raw.githubusercontent.com/maxtuno/Punk/master/logo.png)\r\n\r\nThe license in simple terms, says that you can use freely, while respecting the authorship of the technology,\r\nand mention explicitly its author, when deal with commercial purposes, this includes universities and companies, \r\nprovided they have express permission of Oscar Riveros <oscar.riveros@gmail.com> for profit with this algorithm, technology and knowledge.\r\nand should always include the following license:\r\n\r\nTheir use for purposes contrary to the law, is expressly prohibited only allowed legal use.\r\n\r\nEXPLICIT LICENCE \r\n\r\nCopyright (c) 2015+ Oscar Riveros. All rights reserved. oscar.riveros@gmail.com\r\nWithout any restriction, Oscar Riveros reserved rights, patents and\r\ncommercialization of this knowledge and which derive directly from this work.\r\n\r\nhttp://maxtuno.github.io/Punk\r\n\r\nhttp://twitter.com/maxtuno\r\n\r\nhttp://www.reverbnation.com/maxtuno\r\n\r\nhttp://soundcloud.com/maxtuno\r\n\r\nhttp://www.jango.com/music/Oscar+Riveros\r\n\r\nhttp://mx-clojure.blogspot.cl\r\n\r\nhttp://independent.academia.edu/oarr\r\n\r\nhttps://github.com/maxtuno/Phi\r\n\r\n# Problems\r\n\r\n(See the examples on bin folder for each tool.)\r\n\r\n## SSP\r\n\r\nSubset Sum Problem\r\n\r\nUsage: ./abs_ssp universe<path> log<0|1>\r\n\r\nuniverse: 1ยบ value of file is the target, the rest are the set. (only sets no mult-isets)\r\n\r\n## OR\r\n\r\nUsage: ./abs_or universe<path> pallete<path> zero<number> <0|1>(min, max) log<0|1>\r\n\r\nAn system [0, 1, -10, 30, 40, 0, 0, 20] with inputs and outputs, 0 are dynamics, \r\nand can be replaced by any element of the palette, [3, 7, 10, -1, -7],\r\nYou need find the minimal or maximal, around a predefined 0, (for example if you need al most 100 on your system and need to find the min, your zero is 100),\r\n\r\n(This problem is of my authorship)\r\n\r\n## MCP\r\n\r\nUsage: ./abs_mcp universe<path> log<0|1>\r\n\r\nSeparate an set in two set with the same size and same sum. (only sets no mult-isets)\r\n\r\nMaximum Constrained Partition (https://www.nada.kth.se/~viggo/wwwcompendium/node152.html)\r\n   \r\n\r\n## CRACKER\r\n\r\nSHA3 Cracker\r\n\r\nUsage: ./abs_cracker hash<path> alphabet<path> kel<number> ker<number> algorithm<224|256|384|512> log<0|1>\r\n\r\nhash: File with hashes\r\n\r\nalphabeth: a, b, c, d... 1, 2, 3... A, B, C... =)(... etc... (writhe on plain text)\r\n\r\nkel, ker: try by yourself, but with 0, 0 is ok (a lot can be shortened with suitable values, time to resolution).\r\n\r\nalgorithm: SHA3_224, SHA3_256, SHA3_384, SHA3_512 (write only 224, 256, 384, 512)\r\n\r\nlog: visual loging... \r\n\r\n\r\n## PRIMALITY\r\n\r\nComposite Number Problem\r\n \r\nBadass primality test, include all the RESA numbers from wiki, for test.\r\n \r\nUsage: ./abs_primality numbers<path>\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}